#!/usr/bin/env python3

import argparse
import json
import os
import re
import shutil
import subprocess
import sys

# Globals
verbose = False

# Utility
def cmd(args):
	if verbose:
		sys.stderr.write('cmd "{}"\n'.format(' '.join(args)))
	subprocess.run(args, check=True, stdout=subprocess.DEVNULL)

def readf(file_path):
	with open(file_path, 'r') as file_desc:
		return file_desc.read()

# Default params value
default_emulator = os.path.join(os.path.abspath(os.path.dirname(sys.argv[0])), '../../emulator/emulator')
default_template_dir = os.path.abspath(os.path.dirname(sys.argv[0]))
default_working_dir = '/tmp/c65_bench'

# Params from environement
ca65 = os.getenv('CA65_BIN', 'ca65')
ld65 = os.getenv('LD65_BIN', 'ld65')
kickc = os.getenv('KICKC_BIN', 'kickc.sh')
emulator = os.getenv('EMU65', default_emulator)

# Params from commandline
parser = argparse.ArgumentParser(description='Bench input code, compiled by KickC')
parser.add_argument('sources', metavar='N', type=str, nargs='+', help='Files to compile')
parser.add_argument('--options', '-O', type=str, default='', help='Compilation options')
parser.add_argument('--template-dir', '-t', type=str, default=default_template_dir, help='Directory containing reference files')
parser.add_argument('--working-dir', '-w', type=str, default=default_working_dir, help='Directory in which the bench is built')
parser.add_argument('--verbose', '-v', action='store_true', help='print compiler commands issued on stderr')
args = parser.parse_args()

source_list = [os.path.abspath(p) if p != '-' else '-' for p in args.sources]
compil_options = args.options.split(' ') if args.options != '' else []
template_dir = os.path.abspath(args.template_dir)
working_dir = os.path.abspath(args.working_dir)
verbose = args.verbose

# Setup working directory
shutil.copytree(template_dir, working_dir)
os.chdir(working_dir)

# Build bench
built_prg_path = os.path.join(working_dir, 'bench.6502')
built_dbg_path = os.path.join(working_dir, 'bench.dbg')
built_map_file = os.path.join(working_dir, 'bench.map')
built_asm_path = 'bench.s'

generated_asm = []
for i in range(len(source_list)):
	source_path = source_list[i]
	if source_path == '-':
		source_contents = sys.stdin.read()
		source_path = os.path.join(working_dir, 'stdin.c')
		with open(source_path, 'w') as source_file:
			source_file.write(source_contents)
		source_list[i] = source_path

cmd([kickc] + compil_options + ['-cpu=rom6502', '-t', 'nes', 'bench.c'] + source_list)
generated = readf('bench.asm')
cmd([os.path.join(working_dir, 'asm_convert'), '-o', built_asm_path, 'bench.asm'])

cmd([ca65, built_asm_path])

generated_asm.append({
	'source': 'all_merged.c',
	'asm': generated
})

cmd([ld65, '-o', built_prg_path, '-C', os.path.join(working_dir, 'ld65.cfg'), '--dbgfile', built_dbg_path, '--mapfile', built_map_file, 'bench.o'])

# Extract code size info
code_size = 0
with open(built_dbg_path, 'r') as dbg_file:
	for line in dbg_file:
		line = line.rstrip('\r\n')
		m = re.match('seg\tid=[0-9]+,name="((CODE)|(RODATA)|(DATA))",start=0x[0-9A-F]+,size=0x(?P<size>[0-9A-F]+),.*', line)
		if m is not None:
			code_size += int(m.group('size'), 16)

assert code_size != 0, 'CODE section size not found in dbg file'

# Run bench
run_report_s = subprocess.run([emulator, built_prg_path], capture_output=True, check=True, universal_newlines=True).stdout
run_report = json.loads(run_report_s)

# Output bench result
print(json.dumps({
	'code_size': code_size,
	'cycle_count': run_report['cycle_count'],
	'ram': run_report['ram'],
	'asm': generated_asm
}))
